{"version":3,"file":"index.js","sources":["../src/core/path.ts","../src/core/types.ts","../src/core/Endpoint.ts","../src/core/FilterChain.ts","../src/index.ts"],"sourcesContent":["const replacePrefRegExp = /^[/\\\\]+(.*)/;\nconst replaceSufRegExp = /\\/$/;\nconst replaceSepsRegExp = /[/\\\\]+/g;\n/**\n *\n * join paths with path separator '/'\n * @export\n * @param {...string[]} paths\n * @returns {string}\n */\nexport function join(...paths:string[]):string {\n    return paths.filter(path => !!path)\n        .map(path => {\n            if (path.match(/^[a-z]+:\\/{2,}.*/i)) {\n                return path;\n            }\n            return path.replace(replacePrefRegExp, '$1')\n                .replace(replaceSepsRegExp, '/')\n                .replace(replaceSufRegExp, '');\n        }).join('/');\n}\n","import {Filter} from './FilterChain';\n\nexport type Primitive = string | boolean | number;\n\nexport enum HttpMethod {\n    GET,\n    POST,\n    PUT\n}\nexport enum FilterOpportunity {\n    REQUEST,\n    RESPONSE_SUCCESS,\n    RESPONSE_ERROR,\n}\nexport interface IFiltersConfig {\n    request?: Filter | Filter[];\n    responseSuccess : Filter | Filter[];\n    responseError : Filter | Filter[];\n}\nexport type ProgressListener = () => void;\nexport type AbortListener = () => void;\nexport type ErrorListener = () => void;\nexport type LoadListener = () => void;\nexport type LoadStartListener = () => void;\nexport type LoadEndListener = () => void;\n\nexport interface IListeners {\n    progresss : ProgressListener;\n    abort : AbortListener;\n    error : ErrorListener;\n    load : LoadListener;\n    loadstart : LoadStartListener;\n    loadend : LoadEndListener;\n}\nexport interface IQueryConfig {\n    name : string;\n    defaultValue?: Primitive;\n    required?: boolean;\n    validator?: Validator;\n}\n\nexport interface IHeaderConfig {\n    name : string;\n    defaultValue : string | string[];\n    required?: boolean\n}\n\nexport interface IPathVariable {\n    name : string;\n    defaultValue?: Primitive;\n}\nexport interface IAPIConfig {\n    url?: string;\n    path?: string;\n    method : HttpMethod;\n    pathVariable?: IPathVariable[];\n    queries?: IQueryConfig[];\n    headers?: IHeaderConfig[];\n    filters?: IFiltersConfig;\n    listeners?: IListeners;\n}\n\nexport type Validator = (value : any, params : object) => boolean;\n\nexport interface IEndpointConfigure {\n    basePath: string;\n    filters: IFiltersConfig,\n    apis:{ [name: string]:IAPIConfig }\n}\n","import {Filter} from './Filterchain';\nimport {join as joinPath} from './path';\nimport {IAPIConfig, FilterOpportunity, IEndpointConfigure} from './types';\n\ntype ComplexFiltersType = Filter | Filter[] | undefined;\n\nconst OPPORTUNITY_RESPONSE_ERROR = 'response-error';\nconst OPPORTUNITY_REQUEST = 'request';\nconst OPPORTUNITY_RESPONSE_SUCCESS = 'response-success';\n\ninterface ICachedAPIConfig extends IAPIConfig {\n    original : IAPIConfig;\n}\n\nexport default class Endpoint {\n    public static OPPORTUNITY_REQUEST : string = OPPORTUNITY_REQUEST;\n    public static OPPORTUNITY_RESPONSE_ERROR : string = OPPORTUNITY_RESPONSE_ERROR;\n    public static OPPORTUNITY_RESPONSE_SUCCESS : string = OPPORTUNITY_RESPONSE_SUCCESS;\n\n    private requestFilters : Filter[] = [];\n    private responseSuccessFilters : Filter[] = [];\n    private responseErrorFilters : Filter[] = [];\n    private apis : Map < string,\n    ICachedAPIConfig > = new Map();\n\n    constructor(private server : string, private basePath : string) {}\n\n    public addFilter(filter : Filter, opportunity : FilterOpportunity) : Endpoint {\n        switch(opportunity) {\n            case FilterOpportunity.REQUEST:\n                this.requestFilters = this\n                    .requestFilters\n                    .concat(filter);\n                break;\n            case FilterOpportunity.RESPONSE_ERROR:\n                this.responseErrorFilters = this\n                    .responseErrorFilters\n                    .concat(filter);\n                break;\n            case FilterOpportunity.RESPONSE_SUCCESS:\n                this.responseSuccessFilters = this\n                    .responseSuccessFilters\n                    .concat(filter);\n                break;\n            default:\n                throw new Error(`Unexpected opportunity value: ${opportunity}`);\n        }\n        return this;\n    }\n    public registerAPI(name : string, config : IAPIConfig) : Endpoint {\n        if(this.apis.has(name)) {\n            throw new Error(`Duplicated api name: ${name}`);\n        }\n        const {\n            path,\n            method = 'GET'\n        } = config;\n        let {url} = config;\n\n        if (!url && !path) {\n            throw new Error('API configuration error: missing \"url\" and \"path\"');\n        } else if (!url) {\n            url = joinPath(this.server, this.basePath, path || '');\n        }\n        this.apis\n            .set(name, {\n                ...config,\n                url,\n                method,\n                original: config\n            } as ICachedAPIConfig);\n        return this;\n    }\n    public configure({basePath, filters, apis} : IEndpointConfigure) : Endpoint {\n        if(basePath) {\n            this.basePath = basePath;\n        }\n        if (filters) {\n            this.addFilters(filters.request, FilterOpportunity.REQUEST);\n            this.addFilters(filters.responseError, FilterOpportunity.RESPONSE_ERROR);\n            this.addFilters(filters.responseSuccess, FilterOpportunity.RESPONSE_SUCCESS);\n        }\n        if (apis) {\n            for (const [name,\n                apiconfig]of Object.entries(apis)) {\n                this.registerAPI(name, apiconfig);\n            }\n        }\n\n        return this;\n    }\n    private addFilters(filters : ComplexFiltersType, opt : FilterOpportunity) {\n        if (filters && !(filters instanceof Array)) {\n            filters = [filters]as ComplexFiltersType;\n            }\n            (filters as Filter[])\n            .filter(filter => !!filter)\n            .forEach(filter => {\n                this.addFilter(filter, FilterOpportunity.REQUEST);\n            });\n    }\n}\n","export type Filter = (value : any, chain : FilterChain) => any;\n\nconst TERMINAL_RESULT = new Promise(() => undefined);\n\nexport default class FilterChain {\n    public static isTerminal(value:any) {\n        return TERMINAL_RESULT === value;\n    }\n    /**\n     * @constructs FilterChain\n     * @hideconstructor\n     * @param {Filter[]} filters\n     * @param {number} index\n     */\n    constructor(private filters:Filter[], private index: number) {\n        this.filters = filters.slice(0);\n        this.index = index;\n    }\n    public next(value:any):any {\n        if (this.index >= this.filters.length) {\n            return this.finish(value);\n        }\n\n        const filter = this.filters[this.index];\n        const nextchain = this.nextchain();\n        return filter(value, nextchain);\n    }\n    public retry(value:any) {\n        return this.chainAt(0).start(value);\n    }\n    public start(value:any) {\n        return this.next(value);\n    }\n    public error(reason:Error) {\n        return Promise.reject(reason);\n    }\n    public finish(result:any) {\n        return result;\n    }\n    public terminal() {\n        return TERMINAL_RESULT;\n    }\n    private chainAt(index:number):FilterChain {\n        return new FilterChain(this.filters, index);\n    }\n    private nextchain():FilterChain {\n        return this.chainAt(this.index + 1);\n    }\n\n}\n","import Endpoint from './core/Endpoint';\nimport FilterChain from './core/FilterChain';\n\nexport default {\n    FilterChain,\n    Endpoint\n};\n"],"names":["joinPath","tslib_1.__assign"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,IAAM,iBAAiB,GAAG,aAAa,CAAC;IACxC,IAAM,gBAAgB,GAAG,KAAK,CAAC;IAC/B,IAAM,iBAAiB,GAAG,SAAS,CAAC;IACpC;;;;;;;AAOA;QAAqB,eAAiB;aAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;YAAjB,0BAAiB;;QAClC,OAAO,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,GAAA,CAAC;aAC9B,GAAG,CAAC,UAAA,IAAI;YACL,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAE;gBACjC,OAAO,IAAI,CAAC;aACf;YACD,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC;iBACvC,OAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC;iBAC/B,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;SACtC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;;IChBD,IAAY,UAIX;IAJD,WAAY,UAAU;QAClB,yCAAG,CAAA;QACH,2CAAI,CAAA;QACJ,yCAAG,CAAA;IACP,CAAC,EAJW,UAAU,KAAV,UAAU,QAIrB;AACD,IAAA,IAAY,iBAIX;IAJD,WAAY,iBAAiB;QACzB,+DAAO,CAAA;QACP,iFAAgB,CAAA;QAChB,6EAAc,CAAA;IAClB,CAAC,EAJW,iBAAiB,KAAjB,iBAAiB,QAI5B;;ICPD,IAAM,0BAA0B,GAAG,gBAAgB,CAAC;IACpD,IAAM,mBAAmB,GAAG,SAAS,CAAC;IACtC,IAAM,4BAA4B,GAAG,kBAAkB,CAAC;IAMxD;QAWI,kBAAoB,MAAe,EAAU,QAAiB;YAA1C,WAAM,GAAN,MAAM,CAAS;YAAU,aAAQ,GAAR,QAAQ,CAAS;YANtD,mBAAc,GAAc,EAAE,CAAC;YAC/B,2BAAsB,GAAc,EAAE,CAAC;YACvC,yBAAoB,GAAc,EAAE,CAAC;YACrC,SAAI,GACS,IAAI,GAAG,EAAE,CAAC;SAEmC;QAE3D,4BAAS,GAAhB,UAAiB,MAAe,EAAE,WAA+B;YAC7D,QAAO,WAAW;gBACd,KAAK,iBAAiB,CAAC,OAAO;oBAC1B,IAAI,CAAC,cAAc,GAAG,IAAI;yBACrB,cAAc;yBACd,MAAM,CAAC,MAAM,CAAC,CAAC;oBACpB,MAAM;gBACV,KAAK,iBAAiB,CAAC,cAAc;oBACjC,IAAI,CAAC,oBAAoB,GAAG,IAAI;yBAC3B,oBAAoB;yBACpB,MAAM,CAAC,MAAM,CAAC,CAAC;oBACpB,MAAM;gBACV,KAAK,iBAAiB,CAAC,gBAAgB;oBACnC,IAAI,CAAC,sBAAsB,GAAG,IAAI;yBAC7B,sBAAsB;yBACtB,MAAM,CAAC,MAAM,CAAC,CAAC;oBACpB,MAAM;gBACV;oBACI,MAAM,IAAI,KAAK,CAAC,mCAAiC,WAAa,CAAC,CAAC;aACvE;YACD,OAAO,IAAI,CAAC;SACf;QACM,8BAAW,GAAlB,UAAmB,IAAa,EAAE,MAAmB;YACjD,IAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,0BAAwB,IAAM,CAAC,CAAC;aACnD;YAEG,IAAA,kBAAI,EACJ,kBAAc,EAAd,mCAAc,CACP;YACN,IAAA,gBAAG,CAAW;YAEnB,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;aACxE;iBAAM,IAAI,CAAC,GAAG,EAAE;gBACb,GAAG,GAAGA,IAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;aAC1D;YACD,IAAI,CAAC,IAAI;iBACJ,GAAG,CAAC,IAAI,EAAEC,aACJ,MAAM,IACT,GAAG,KAAA;gBACH,MAAM,QAAA,EACN,QAAQ,EAAE,MAAM,GACC,CAAC,CAAC;YAC3B,OAAO,IAAI,CAAC;SACf;QACM,4BAAS,GAAhB,UAAiB,EAA8C;gBAA7C,sBAAQ,EAAE,oBAAO,EAAE,cAAI;YACrC,IAAG,QAAQ,EAAE;gBACT,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aAC5B;YACD,IAAI,OAAO,EAAE;gBACT,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;gBAC5D,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,cAAc,CAAC,CAAC;gBACzE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,eAAe,EAAE,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;aAChF;YACD,IAAI,IAAI,EAAE;gBACN,KACiB,UAAoB,EAApB,KAAA,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAApB,cAAoB,EAApB,IAAoB;oBAD1B,IAAA,WACG,EADF,YAAI,EACZ,iBAAS;oBACT,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;iBACrC;aACJ;YAED,OAAO,IAAI,CAAC;SACf;QACO,6BAAU,GAAlB,UAAmB,OAA4B,EAAE,GAAuB;YAAxE,iBASC;YARG,IAAI,OAAO,IAAI,EAAE,OAAO,YAAY,KAAK,CAAC,EAAE;gBACxC,OAAO,GAAG,CAAC,OAAO,CAAsB,CAAC;aACxC;YACA,OAAoB;iBACpB,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,CAAC,MAAM,GAAA,CAAC;iBAC1B,OAAO,CAAC,UAAA,MAAM;gBACX,KAAI,CAAC,SAAS,CAAC,MAAM,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;aACrD,CAAC,CAAC;SACV;QArFa,4BAAmB,GAAY,mBAAmB,CAAC;QACnD,mCAA0B,GAAY,0BAA0B,CAAC;QACjE,qCAA4B,GAAY,4BAA4B,CAAC;QAoFvF,eAAC;KAAA,IAAA;;ICnGD,IAAM,eAAe,GAAG,IAAI,OAAO,CAAC,cAAM,OAAA,SAAS,GAAA,CAAC,CAAC;IAErD;;;;;;;QAUI,qBAAoB,OAAgB,EAAU,KAAa;YAAvC,YAAO,GAAP,OAAO,CAAS;YAAU,UAAK,GAAL,KAAK,CAAQ;YACvD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;QAZa,sBAAU,GAAxB,UAAyB,KAAS;YAC9B,OAAO,eAAe,KAAK,KAAK,CAAC;SACpC;QAWM,0BAAI,GAAX,UAAY,KAAS;YACjB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACnC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC7B;YAED,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACxC,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YACnC,OAAO,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SACnC;QACM,2BAAK,GAAZ,UAAa,KAAS;YAClB,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACvC;QACM,2BAAK,GAAZ,UAAa,KAAS;YAClB,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;QACM,2BAAK,GAAZ,UAAa,MAAY;YACrB,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SACjC;QACM,4BAAM,GAAb,UAAc,MAAU;YACpB,OAAO,MAAM,CAAC;SACjB;QACM,8BAAQ,GAAf;YACI,OAAO,eAAe,CAAC;SAC1B;QACO,6BAAO,GAAf,UAAgB,KAAY;YACxB,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;SAC/C;QACO,+BAAS,GAAjB;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;SACvC;QAEL,kBAAC;IAAD,CAAC,IAAA;;AC9CD,gBAAe;QACX,WAAW,aAAA;QACX,QAAQ,UAAA;KACX,CAAC;;;;;;;;"}